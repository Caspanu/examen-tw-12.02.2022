function isValid(Model, json) {
  return Object.entries(Model.tableAttributes).reduce(
    (valid, [name, field]) => {
      if (
        valid &&
        !field._autoGenerated &&
        !field.primaryKey &&
        field.allowNull === false &&
        !json[name]
      ) {
        valid = false
      }
      return valid
    },
    true,
  )
}

function sorting(request) {
  let orderBy = request.headers['x-sort']
  if (orderBy) {
    if (orderBy.split(',').length == 1) {
      return orderBy.split(',').reduce((sort, field) => {
        sort.push([
          field.substring(1),
          field.charAt(0) === '+' ? 'ASC' : 'DESC',
        ])
        return sort
      }, [])
    } else {
      return undefined
    }
  } else {
    return undefined
  }
}

function filter(request) {
  if (request.headers['x-fields']) {
    let attributes = request.headers['x-fields'].split(',')
    if (attributes.length < 3) {
      return request.headers['x-fields'].split(',')
    } else {
      return undefined
    }
  } else {
    return undefined
  }
}

async function getRecords(Entitate, request, response) {
  try {
    let records = await Entitate.findAll({
      attributes: filter(request),
      order: sorting(request),
    })
    if (records.length > 0) {
      response.status(200).json(records)
    } else {
      response.status(204).send()
    }
  } catch (e) {
    response.status(500).json(e)
    console.log(e)
  }
}

async function getRecord(Entitate, request, response) {
  try {
    let record = await Entitate.findByPk(request.params.id, {
      attributes: filter(request),
    })
    if (record) {
      response.status(200).send(record)
    } else {
      response.status(404).send()
    }
  } catch (e) {
    response.status(500).json(e)
  }
}

async function postRecord(Entitate, request, response) {
  try {
    if (isValid(Entitate, request.body)) {
      let record = await Entitate.create(request.body)
      response
        .status(201)
        .location(
          `http://${request.headers.host}${request.baseUrl}${request.url}/${record.id}`,
        )
        .send()
    } else {
      response.status(400).send()
    }
  } catch (e) {
    response.status(500).json(e)
  }
}

async function putRecord(Entitate, request, response) {
  try {
    let record = await Entitate.findByPk(request.params.id)
    if (record) {
      if (isValid(Entitate, request.body)) {
        await record.update(request.body)
        response.status(204).send()
      } else {
        response.status(400).send()
      }
    } else {
      response.status(404).send()
    }
  } catch (e) {
    response.status(500).json(e)
  }
}

async function deleteRecord(Entitate, request, response) {
  try {
    let record = await Entitate.findByPk(request.params.id)
    if (record) {
      await record.destroy()
      response.status(204).send()
    } else {
      response.status(404).send()
    }
  } catch (e) {
    response.status(500).json(e)
  }
}

async function deleteRecords(Entitate, request, response) {
  try {
    await Entitate.truncate()
    response.status(204).send()
  } catch (e) {
    response.status(500).json(e)
  }
}

export {
  getRecord,
  getRecords,
  putRecord,
  postRecord,
  deleteRecord,
  deleteRecords,
}
